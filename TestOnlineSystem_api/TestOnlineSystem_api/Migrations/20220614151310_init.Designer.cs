// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Mini_project_API.Data;

namespace DatHT8_Mini_project_API.Migrations
{
    [DbContext(typeof(ELearningDbContext))]
    [Migration("20220614151310_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Mini_project_API.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsBlock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Fullname = "Huynh Tan Dat",
                            IsActive = true,
                            IsBlock = false,
                            Password = "e10adc3949ba59abbe56e057f20f883e",
                            RoleId = 1,
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2,
                            Fullname = "Giao vien A",
                            IsActive = true,
                            IsBlock = false,
                            Password = "e10adc3949ba59abbe56e057f20f883e",
                            RoleId = 2,
                            Username = "teacherA"
                        },
                        new
                        {
                            Id = 3,
                            Fullname = "Hoc sinh A",
                            IsActive = true,
                            IsBlock = false,
                            Password = "e10adc3949ba59abbe56e057f20f883e",
                            RoleId = 3,
                            Username = "studentA"
                        },
                        new
                        {
                            Id = 4,
                            Fullname = "Hoc sinh B",
                            IsActive = true,
                            IsBlock = false,
                            Password = "e10adc3949ba59abbe56e057f20f883e",
                            RoleId = 3,
                            Username = "studentB"
                        },
                        new
                        {
                            Id = 5,
                            Fullname = "Hoc sinh C",
                            IsActive = false,
                            IsBlock = false,
                            Password = "e10adc3949ba59abbe56e057f20f883e",
                            RoleId = 3,
                            Username = "studentC"
                        });
                });

            modelBuilder.Entity("Mini_project_API.Models.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContentAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Istrue")
                        .HasColumnType("bit");

                    b.Property<string>("PathImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContentAnswer = "1",
                            Istrue = false,
                            PathImage = "",
                            QuestionId = 1
                        },
                        new
                        {
                            Id = 2,
                            ContentAnswer = "2",
                            Istrue = true,
                            PathImage = "",
                            QuestionId = 1
                        },
                        new
                        {
                            Id = 3,
                            ContentAnswer = "3",
                            Istrue = false,
                            PathImage = "",
                            QuestionId = 1
                        },
                        new
                        {
                            Id = 4,
                            ContentAnswer = "4",
                            Istrue = false,
                            PathImage = "",
                            QuestionId = 1
                        },
                        new
                        {
                            Id = 5,
                            ContentAnswer = "1",
                            Istrue = false,
                            PathImage = "",
                            QuestionId = 2
                        },
                        new
                        {
                            Id = 6,
                            ContentAnswer = "2",
                            Istrue = false,
                            PathImage = "",
                            QuestionId = 2
                        },
                        new
                        {
                            Id = 7,
                            ContentAnswer = "3",
                            Istrue = true,
                            PathImage = "",
                            QuestionId = 2
                        },
                        new
                        {
                            Id = 8,
                            ContentAnswer = "4",
                            Istrue = false,
                            PathImage = "",
                            QuestionId = 2
                        },
                        new
                        {
                            Id = 9,
                            ContentAnswer = "1",
                            Istrue = false,
                            PathImage = "",
                            QuestionId = 3
                        },
                        new
                        {
                            Id = 10,
                            ContentAnswer = "2",
                            Istrue = false,
                            PathImage = "",
                            QuestionId = 3
                        },
                        new
                        {
                            Id = 11,
                            ContentAnswer = "3",
                            Istrue = false,
                            PathImage = "",
                            QuestionId = 3
                        },
                        new
                        {
                            Id = 12,
                            ContentAnswer = "4",
                            Istrue = true,
                            PathImage = "",
                            QuestionId = 3
                        },
                        new
                        {
                            Id = 13,
                            ContentAnswer = "1",
                            Istrue = false,
                            PathImage = "",
                            QuestionId = 4
                        },
                        new
                        {
                            Id = 14,
                            ContentAnswer = "2",
                            Istrue = false,
                            PathImage = "",
                            QuestionId = 4
                        },
                        new
                        {
                            Id = 15,
                            ContentAnswer = "3",
                            Istrue = false,
                            PathImage = "",
                            QuestionId = 4
                        },
                        new
                        {
                            Id = 16,
                            ContentAnswer = "5",
                            Istrue = true,
                            PathImage = "",
                            QuestionId = 4
                        },
                        new
                        {
                            Id = 17,
                            ContentAnswer = "1",
                            Istrue = true,
                            PathImage = "",
                            QuestionId = 5
                        },
                        new
                        {
                            Id = 18,
                            ContentAnswer = "0",
                            Istrue = true,
                            PathImage = "",
                            QuestionId = 5
                        });
                });

            modelBuilder.Entity("Mini_project_API.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContentQuestion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsOnlyAnswer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("PathImage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContentQuestion = "1 + 1",
                            IsOnlyAnswer = false,
                            PathImage = ""
                        },
                        new
                        {
                            Id = 2,
                            ContentQuestion = "1 + 2",
                            IsOnlyAnswer = false,
                            PathImage = ""
                        },
                        new
                        {
                            Id = 3,
                            ContentQuestion = "1 + 3",
                            IsOnlyAnswer = false,
                            PathImage = ""
                        },
                        new
                        {
                            Id = 4,
                            ContentQuestion = "1 + 4",
                            IsOnlyAnswer = false,
                            PathImage = ""
                        },
                        new
                        {
                            Id = 5,
                            ContentQuestion = "em + anh",
                            IsOnlyAnswer = false,
                            PathImage = ""
                        });
                });

            modelBuilder.Entity("Mini_project_API.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "teacher"
                        },
                        new
                        {
                            Id = 3,
                            Name = "student"
                        });
                });

            modelBuilder.Entity("Mini_project_API.Models.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("MaxScores")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(10L);

                    b.Property<decimal>("Minute")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("TestDay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2022, 6, 14, 22, 13, 9, 392, DateTimeKind.Local).AddTicks(6948));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MaxScores = 0L,
                            Minute = 100m,
                            TestDay = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Final C#"
                        },
                        new
                        {
                            Id = 2,
                            MaxScores = 0L,
                            Minute = 100m,
                            TestDay = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Final Sql"
                        },
                        new
                        {
                            Id = 3,
                            MaxScores = 0L,
                            Minute = 100m,
                            TestDay = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Final Web Api"
                        });
                });

            modelBuilder.Entity("Mini_project_API.Models.TestAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("bit");

                    b.Property<int>("Scores")
                        .HasColumnType("int");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("TestId");

                    b.ToTable("TestAccounts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountId = 3,
                            IsComplete = true,
                            Scores = 10,
                            TestId = 1
                        },
                        new
                        {
                            Id = 2,
                            AccountId = 3,
                            IsComplete = true,
                            Scores = 9,
                            TestId = 2
                        },
                        new
                        {
                            Id = 3,
                            AccountId = 4,
                            IsComplete = true,
                            Scores = 5,
                            TestId = 1
                        },
                        new
                        {
                            Id = 4,
                            AccountId = 4,
                            IsComplete = false,
                            Scores = 0,
                            TestId = 3
                        },
                        new
                        {
                            Id = 5,
                            AccountId = 4,
                            IsComplete = true,
                            Scores = 8,
                            TestId = 1
                        },
                        new
                        {
                            Id = 6,
                            AccountId = 5,
                            IsComplete = true,
                            Scores = 2,
                            TestId = 2
                        });
                });

            modelBuilder.Entity("Mini_project_API.Models.TestQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("TestId");

                    b.ToTable("TestQuestions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            QuestionId = 1,
                            TestId = 1
                        },
                        new
                        {
                            Id = 2,
                            QuestionId = 2,
                            TestId = 1
                        },
                        new
                        {
                            Id = 3,
                            QuestionId = 3,
                            TestId = 1
                        },
                        new
                        {
                            Id = 4,
                            QuestionId = 4,
                            TestId = 1
                        },
                        new
                        {
                            Id = 5,
                            QuestionId = 5,
                            TestId = 1
                        },
                        new
                        {
                            Id = 6,
                            QuestionId = 1,
                            TestId = 2
                        },
                        new
                        {
                            Id = 7,
                            QuestionId = 5,
                            TestId = 2
                        },
                        new
                        {
                            Id = 8,
                            QuestionId = 3,
                            TestId = 2
                        },
                        new
                        {
                            Id = 9,
                            QuestionId = 2,
                            TestId = 3
                        },
                        new
                        {
                            Id = 10,
                            QuestionId = 5,
                            TestId = 3
                        },
                        new
                        {
                            Id = 11,
                            QuestionId = 3,
                            TestId = 3
                        });
                });

            modelBuilder.Entity("Mini_project_API.Models.Account", b =>
                {
                    b.HasOne("Mini_project_API.Models.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Mini_project_API.Models.Answer", b =>
                {
                    b.HasOne("Mini_project_API.Models.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Mini_project_API.Models.TestAccount", b =>
                {
                    b.HasOne("Mini_project_API.Models.Account", "Account")
                        .WithMany("TestAccounts")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mini_project_API.Models.Test", "Test")
                        .WithMany("TestAccounts")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("Mini_project_API.Models.TestQuestion", b =>
                {
                    b.HasOne("Mini_project_API.Models.Question", "Question")
                        .WithMany("TestQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mini_project_API.Models.Test", "Test")
                        .WithMany("TestQuestions")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("Mini_project_API.Models.Account", b =>
                {
                    b.Navigation("TestAccounts");
                });

            modelBuilder.Entity("Mini_project_API.Models.Question", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("TestQuestions");
                });

            modelBuilder.Entity("Mini_project_API.Models.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("Mini_project_API.Models.Test", b =>
                {
                    b.Navigation("TestAccounts");

                    b.Navigation("TestQuestions");
                });
#pragma warning restore 612, 618
        }
    }
}
